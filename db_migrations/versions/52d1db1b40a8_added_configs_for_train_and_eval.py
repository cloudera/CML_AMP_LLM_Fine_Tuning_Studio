"""added configs for train and eval

Revision ID: 52d1db1b40a8
Revises: 
Create Date: 2024-12-09 13:28:03.185335

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '52d1db1b40a8'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def column_exists(table_name, column_name):
    """
    Check if a column exists in a table
    """
    inspector = sa.inspect(op.get_bind())
    columns = inspector.get_columns(table_name)
    return any(column['name'] == column_name for column in columns)

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('evaluation_jobs', schema=None) as batch_op:
        if not column_exists('evaluation_jobs', 'model_bnb_config'):
            batch_op.add_column(sa.Column('model_bnb_config', sa.String(), nullable=True))
        if not column_exists('evaluation_jobs', 'adapter_bnb_config'):
            batch_op.add_column(sa.Column('adapter_bnb_config', sa.String(), nullable=True))
        if not column_exists('evaluation_jobs', 'generation_config'):
            batch_op.add_column(sa.Column('generation_config', sa.String(), nullable=True))

    with op.batch_alter_table('fine_tuning_jobs', schema=None) as batch_op:
        if not column_exists('fine_tuning_jobs', 'training_arguments_config'):
            batch_op.add_column(sa.Column('training_arguments_config', sa.String(), nullable=True))
        if not column_exists('fine_tuning_jobs', 'model_bnb_config'):
            batch_op.add_column(sa.Column('model_bnb_config', sa.String(), nullable=True))
        if not column_exists('fine_tuning_jobs', 'adapter_bnb_config'):
            batch_op.add_column(sa.Column('adapter_bnb_config', sa.String(), nullable=True))
        if not column_exists('fine_tuning_jobs', 'lora_config'):
            batch_op.add_column(sa.Column('lora_config', sa.String(), nullable=True))

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('fine_tuning_jobs', schema=None) as batch_op:
        batch_op.drop_column('lora_config')
        batch_op.drop_column('adapter_bnb_config')
        batch_op.drop_column('model_bnb_config')
        batch_op.drop_column('training_arguments_config')

    with op.batch_alter_table('evaluation_jobs', schema=None) as batch_op:
        batch_op.drop_column('generation_config')
        batch_op.drop_column('adapter_bnb_config')
        batch_op.drop_column('model_bnb_config')

    # ### end Alembic commands ###
